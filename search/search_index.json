{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to virtual-spot-weld","text":"<p>Generate a structured mesh with only hexahedral elements for a spot weld finite element calculation.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Download and install Gmsh: https://gmsh.info/ </li> <li>Download virtual-spot-weld repository</li> <li>Open <code>00_main.geo</code> in Gmsh</li> <li>Set parameters on the interface or in <code>10_parameters/02_custom_parameters.geo</code></li> <li>Click on <code>Modules -&gt; Geometry -&gt; Reload script</code> to reload the new geometry</li> <li>Click on <code>Modules -&gt; Mesh -&gt; 3D</code> to create mesh</li> <li>Press <code>Alt + Shift + B</code> to inspect the mesh</li> <li>Use <code>File -&gt; Export...</code> and choose any Mesh file format</li> <li>Edit the final spot weld mesh in a software of your choosing!</li> </ul>"},{"location":"apireference/","title":"API","text":""},{"location":"apireference/#ptn_functionsgeo","title":"ptn_functions.geo","text":"<p>The ptn_functions.geo file contains various functions to solve for geometrical problems. All functions are designed for 2D space, i.e. the z-coordinate is ignored, unless otherwise stated.</p>"},{"location":"apireference/#calc_intersection_line_circle","title":"calc_intersection_line_circle","text":"<p>Description</p> <p>Calculates the x and y coordinates of a point on the intersection between a line and a circle. Returns x and y coordinates of the point of the intersection.</p> <p>Parameters </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Default <code>ptn_p1</code> and <code>ptn_p2</code> Endpoints of a line. required <code>ptn_p3</code> Point at center of circle. required <code>ptn_circ_rad</code> Radius of circle. required <p> Returns  There are two solutions for the intersection between a line and a circle.   </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>ptn_inter1_x</code> X-coordinate of first solution. <code>ptn_inter1_y</code> Y-coordinate of first solution. <code>ptn_inter2_x</code> X-coordinate of second solution. <code>ptn_inter2_y</code> Y-coordinate of second solution."},{"location":"apireference/#calc_intersection_of_two_arcs","title":"calc_intersection_of_two_arcs","text":"<p>Description</p> <p>Calculates the x and y coordinates of a point on the intersection between two arcs or circles of the same radius.</p> <p>Parameters </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Default <code>ptn_p1</code> Point at center of first circle. required <code>ptn_p2</code> Point at center of second circle. required <code>ptn_circ_rad_1</code> Radius of first circle. required <code>ptn_circ_rad_2</code> Radius of second circle. required <p> Returns  The function returns two solutions for intersection between two arcs or circles.  </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>ptn_inter1_x</code> X-coordinate of first solution. <code>ptn_inter1_y</code> Y-coordinate of first solution. <code>ptn_inter2_x</code> X-coordinate of second solution. <code>ptn_inter2_y</code> Y-coordinate of second solution."},{"location":"apireference/#calc_angle_btw_two_vectors","title":"calc_angle_btw_two_vectors","text":"<p>Description</p> <p>Calculates angle between two vectors / lines with originate at the same point. Returns angle in radians.</p> <p>Parameters </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Default <code>ptn_p1</code> Origin of both vectors / lines. required <code>ptn_p2</code> Endpoint of first line.. required <code>ptn_p3</code> Endpoint of second line. required <p> Returns  The function returns the intersection between two arcs or circles.  </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>ptn_anglex</code> Angle between two vectors in radians."},{"location":"apireference/#calc_intersection_btw_two_lines","title":"calc_intersection_btw_two_lines","text":"<p>Description</p> <p>Calculates the x and y coordinates of a point on the intersection between two lines. </p> <p>Parameters </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Default <code>ptn_p1</code> and <code>ptn_p2</code> Endpoints of first line. required <code>ptn_p3</code> and <code>ptn_p4</code> Endpoints of second line. required <p> Returns  Returns intersection between two lines. </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>ptn_inter_x</code> X-coordinate of intersetion. <code>ptn_inter_y</code> Y-coordinate of intersetion."},{"location":"apireference/#calc_distance_btw_two_points","title":"calc_distance_btw_two_points","text":"<p>Description</p> <p>Calculates the distance between two points. Works in 3D space.</p> <p>Parameters </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Default <code>ptn_p1</code> Point in 3D space. required <code>ptn_p2</code> Point in 3D space. required <p> Returns  Returns shortest distance between two points.  </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>ptn_dist</code> Distance between two points."},{"location":"apireference/#ptn_bezier_functionsgeo","title":"ptn_bezier_functions.geo","text":""},{"location":"apireference/#slice_bezier_param","title":"slice_bezier_param","text":"<p>Description Slices a cubic Bezier curve into two cubic Bezier curves. Endpoints are startpoint (<code>ptn_p1</code>) of first Bezier curve and endpoint (<code>ptn_p4</code>) of second Bezier curve.</p> <p>Parameters </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Default <code>ptn_param</code> Ratio at which curve is split. required <code>ptn_p1</code> End point of Bezier curve. required <code>ptn_p2</code> Control point of Bezier curve. required <code>ptn_p3</code> Control point of Bezier curve. required <code>ptn_p4</code> End point of Bezier curve. required <p> Returns </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>x12</code> and <code>y12</code> Coordinates of control point for first new curve. <code>x123</code> and <code>y123</code> Coordinates of control point for first new curve. <code>x1234</code> and <code>y1234</code> Coordinates of splitting point. End point for both new bezier curves. <code>x234</code> and <code>y234</code> Coordinates of control point for second new curve. <code>x34</code> and <code>y34</code> Coordinates of control point for second new curve."},{"location":"apireference/#calc_intersection_bezier_line","title":"calc_intersection_Bezier_line","text":"<p>Description Calculates the intersection between a Bezier curve and a line by using the Newton's method.</p> <p>Parameters </p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Default <code>ptn_p1</code> End point of Bezier curve. required <code>ptn_p2</code> Control point of Bezier curve. required <code>ptn_p3</code> Control point of Bezier curve. required <code>ptn_p4</code> End point of Bezier curve. required <code>ptn_pline1</code> and <code>ptn_pline2</code> End points of line. required <p> Returns  Calculates parameter, i.e. ratio at which Bezier needs to be split. Necessary as input for slice_bezier_param.</p> Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>ptn_param</code> Ratio at which curve is split for intersection."},{"location":"apireference/#example","title":"Example","text":"<p>Slice circlular arc of radius 1 centered at origin (0,0) with a horizontal line at y=0.5.</p> <pre><code>Include \"ptn_bezier_functions.geo\";\n\nk=0.5522847498;\nPoint(1) = {0, 1, 0};\nPoint(2) = {k, 1, 0};\nPoint(3) = {1, k, 0};\nPoint(4) = {1, 0, 0};\n\n\nptn_p1[] = Point{1};\nptn_p2[] = Point{2};\nptn_p3[] = Point{3};\nptn_p4[] = Point{4};\n\nptn_pline1[] = {0., 0.5, 0.};  // start point line\nptn_pline2[] = {10., 0.5, 0.}; // end point line\n\n\nCall calc_intersection_Bezier_line;\n\nCall slice_bezier_param;\n\n\nPoint(1002) = {ptn_x12, ptn_y12, 0}; // Control point\nPoint(1003) = {ptn_x123, ptn_y123, 0}; // Control point\nPoint(1004) = {ptn_x1234, ptn_y1234, 0}; // Intersecting\nPoint(1005) = {ptn_x234, ptn_y234, 0}; // Control point\nPoint(1006) = {ptn_x34, ptn_y34, 0}; // Control point\nBezier(101)  = {1, 1002, 1003, 1004};\nBezier(102)  = {1004, 1005, 1006, 4};\n</code></pre>"},{"location":"userguide_code/","title":"User Guide - Code","text":""},{"location":"userguide_code/#mesh-construction","title":"Mesh construction","text":"<p>The information in this guide explains how the mesh is constructed. Including: </p> <ul> <li>Where to find the parameters in the geometry</li> <li>How the geometry is constrained by various parameters</li> <li>Step-by-step guide on how the mesh geometry is calculated</li> </ul> <p>The default settings lead to well constructed meshes in most cases. Sometimes it might be necessary to customize some parameters. This guide will help you to find the position in the .geo-files, where you need to make adjustments for your specific cases.</p>"},{"location":"userguide_code/#fusion-zone","title":"Fusion zone","text":"<p><code>01_fusion_zone.geo</code></p>"},{"location":"userguide_code/#overview","title":"Overview","text":""},{"location":"userguide_code/#center-of-fusion-zone","title":"Center of fusion zone","text":"<p> Generally, the coordinates of the points are set first. For the definition of lines the point with lower tag is given first. Therefore the direction of lines is usually from the lower point tag to the higher point tag.  </p>"},{"location":"userguide_code/#create-fusion-zone-boundary-outside","title":"Create fusion zone boundary outside","text":"<p> A cubic Bezi\u00e9r curve is given, which spans the contour from Point(116) to (14). The curve is then split into two separate Bezi\u00e9r curves. One curve runs from Point(14) to Point(15) the other one from Point(15) to Point(116). File <code>06_create_bezier.geo</code> handels the splitting of the curves.</p> <p> The cubic Bezier curve from Point(15) to (116) is split again at Point(6). A new cubic Bezier curve is given to describe the contour from Point(15) to (6).  The position for Point(6) does not depend on the angle of the weld nugget. This allows to generate congruent meshes. As long as the weld nugget diameter is the same for two spot weld halves. The mesh will be congruent at the interface. In order to get a continous line from Point(16) to (17) the cubic Bezi\u00e9r and the straight horizontal line need to be fused. The resulting Bezi\u00e9r curve (325) is of grade 5.</p>"},{"location":"userguide_code/#create-fusion-zone-boundary-inside","title":"Create fusion zone boundary inside","text":"<p> The contour from Point(9) to Point(12) consists of three Bezi\u00e9r curves. They are generated in the same way as the outside contour.</p>"},{"location":"userguide_code/#y-grid-transition-corner-to-arc","title":"Y-grid transition corner to arc","text":"<p> In order to create a structured mesh, all surfaces must be constructed using four lines which make four corners. This is not yet the case at the front part of the mesh.  Therefore, a so called y-grid is created. Four steps are necessary: </p> <ul> <li>Calculate position of Point(8).</li> <li>Create circular arc spanning from Point(7) to (8) with center at Point(200).</li> <li>Create circular arc spanning from Point(8) to (106) with center at Point(201).</li> <li>Calculate position of Point(6).</li> <li>Create Bezi\u00e9r curve from Point(6) to Point(4).</li> </ul> <p> Lorem ipsum</p>"},{"location":"userguide_code/#create-bezier-curves","title":"Create Bezier curves","text":""},{"location":"userguide_usage/","title":"User Guide - Usage","text":""},{"location":"userguide_usage/#generate-mesh","title":"Generate mesh","text":"<p>This is a guide on how to generate a mesh with specific geometric sizes.</p>"},{"location":"userguide_usage/#set-parameters","title":"Set parameters","text":"<p>You can set a certain number of parameters on the user interface:  </p> <ul> <li><code>flag_shaz</code>: choose if a softened-heat affected zone is output in separate element set, if flag_shaz = 0, a width of clen will be displayed</li> <li><code>flag_halo</code>: choose if a halo is constructed (width of halo will be <code>clen</code>)</li> <li><code>clen</code>: characteristic length, i.e. size of element edge length, it also sets the width of the halo</li> <li><code>t0</code>: sheet thickness</li> <li><code>hL</code>: height of penetration of fusion zone into the sheet</li> <li><code>dL</code>: spot weld diameter</li> <li><code>bHAZ</code>: width of heat-affected zone (includes width of halo)</li> <li><code>bSHAZ</code>: width of softened heat-affected zone</li> <li><code>angle_wn</code>: inclination of weld nugget in degrees (always &gt;= 45\u00b0!)</li> <li><code>angle_haz</code>: inclination of heat-affected zon in degrees </li> </ul>"},{"location":"userguide_usage/#set-customize-construction","title":"Set customize construction","text":"<p> The default settings lead to well constructed meshes in most cases. For a more customized mesh you can also set parameters specific to the mesh construction in <code>10_parameters/02_custom_parameters.geo</code>.</p> <ul> <li><code>h1</code>: set size of h1, important: <code>h1 + h2 = hL</code></li> <li><code>h2</code>: set size of h2, important: <code>h1 + h2 = hL</code></li> <li><code>h3</code>: set size of h3, which is the width of the halo, recommended to be 0.1 mm or less, if <code>flag_halo = 0</code> then this parameter is ignored</li> <li> <p><code>h4</code>: set size of h4, important: <code>h1 + h2 + h3 + h4 = t0</code></p> </li> <li> <p><code>b1</code>: set size of b1, important: <code>b1 + b2 + b3 + b4= dL</code> </p> </li> <li><code>b2</code>: set size of b2, important: <code>b1 + b2 + b3 + b4= dL</code></li> <li><code>b3</code>: set size of b2, important: <code>b1 + b2 + b3 + b4= dL</code></li> <li><code>b4</code>: set size of b2, important: <code>b1 + b2 + b3 + b4= dL</code></li> <li><code>b5</code>: set size of b5, which is the width of the halo, if the normal width is supposed to be equal to h3, it is recommended to use <code>b5 = h3/Sin(angle_wn);</code></li> <li><code>b6</code>: set size of b6, size of heat-affected zone</li> <li><code>b7</code>: set size of b7, size of softened heat-affected zone</li> <li> <p><code>b8</code>: set size of b8, control how much base material is modeled</p> </li> <li> <p><code>b200</code>: set size of b200, is x-coordinate of Point 200, which is the center point of one of the arcs which creates the corner mesh at the tip of the spot weld</p> </li> <li><code>b201</code>: set size of b201, is x-coordinate of Point 201, which is the center point of one of the arcs which creates the corner mesh at the tip of the spot weld</li> <li><code>h201</code>: set size of h201, is x-coordinate of Point 201, which is the center point of one of the arcs which creates the corner mesh at the tip of the spot weld, it controls the curvature of the arc at Point 7</li> </ul> <p>The following parameters set the number of nodes / seeds on each line. Each parameter controls a number of lines. Refer to the diagram to see which lines use the same seeds (indicated by color). This ensures a structured mesh.</p> <ul> <li><code>num_nodes_b1</code>: set size of number of nodes b1, this is also the number of nodes at an eight of the circumference</li> <li><code>num_nodes_b2</code>: set size of number of nodes b2</li> <li><code>num_nodes_b3</code>: set size of number of nodes b3</li> <li><code>num_nodes_b4</code>: set size of number of nodes b4</li> <li><code>num_nodes_b5</code>: set size of number of nodes b5`</li> <li><code>num_nodes_b7</code>: set size of number of nodes b7</li> <li><code>num_nodes_b8</code>: set size of number of nodes b8</li> </ul>"},{"location":"userguide_usage/#export-mesh","title":"Export mesh","text":""},{"location":"userguide_usage/#ls-dyna","title":"LS-Dyna","text":"<p>Ensure that <code>Save group of elements</code> is ticked, to output each material zone as a seperate element set. Parts will correspond to volume names, which are arbitrarily named in the code.</p>"},{"location":"userguide_usage/#abaqus","title":"Abaqus","text":"<p>All material zones will automatically be output into separate element sets.</p>"}]}